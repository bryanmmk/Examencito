// <auto-generated />
using System;
using FarmaciaProjecto.Adaptors.SQLServerDataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FarmaciaProjecto.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(FarmaciaDB))]
    [Migration("20220708152923_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Administracion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contra")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tb_Administracion");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("ID_Categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Categoria");

                    b.ToTable("tb_Categoria");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.DetallePedido", b =>
                {
                    b.Property<Guid>("ID_DetallePedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("ID_Pedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PrecioUnitario")
                        .HasColumnType("float");

                    b.HasKey("ID_DetallePedido");

                    b.HasIndex("ID_Pedido");

                    b.ToTable("tb_DetallePedido");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Medicamentos", b =>
                {
                    b.Property<Guid>("ID_Medicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Categoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProveedorID_Proveedor")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Medicamento");

                    b.HasIndex("CategoriaID_Categoria");

                    b.HasIndex("ProveedorID_Proveedor");

                    b.ToTable("tb_Medicamentos");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Pedido", b =>
                {
                    b.Property<Guid>("ID_Pedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ID_Medicamento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Usuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<Guid?>("UsuariosID_Usuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("estado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Pedido");

                    b.HasIndex("ID_Medicamento");

                    b.HasIndex("UsuariosID_Usuario");

                    b.ToTable("tb_Pedido");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Proveedor", b =>
                {
                    b.Property<Guid>("ID_Proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Codigo_Proveedor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Proveedor");

                    b.ToTable("tb_Proveedor");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("ID_Usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ID_Usuario");

                    b.ToTable("tb_Usuario");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.DetallePedido", b =>
                {
                    b.HasOne("FarmaciaProjecto.Core.Domain.Models.Pedido", "Pedidos")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("ID_Pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Medicamentos", b =>
                {
                    b.HasOne("FarmaciaProjecto.Core.Domain.Models.Categoria", "Categoria")
                        .WithMany("Medicamentoss")
                        .HasForeignKey("CategoriaID_Categoria");

                    b.HasOne("FarmaciaProjecto.Core.Domain.Models.Proveedor", "Proveedor")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ProveedorID_Proveedor");

                    b.Navigation("Categoria");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Pedido", b =>
                {
                    b.HasOne("FarmaciaProjecto.Core.Domain.Models.Medicamentos", "Medicamentos")
                        .WithMany("Pedidos")
                        .HasForeignKey("ID_Medicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmaciaProjecto.Core.Domain.Models.Usuario", "Usuarios")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuariosID_Usuario");

                    b.Navigation("Medicamentos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Categoria", b =>
                {
                    b.Navigation("Medicamentoss");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Medicamentos", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Proveedor", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("FarmaciaProjecto.Core.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
